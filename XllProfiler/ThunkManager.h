////////////////////////////////////////////////////////////////////////////
// ThunkManager.h -- instrument DLL routines through thunking

#pragma once

#include <Windows.h>
#include <vector>

struct ThunkInfo;

typedef void (*BeforeCallHandler)(ThunkInfo *pThunkInfo, void *returnAddress, va_list);
typedef void (*AfterCallHandler)(ThunkInfo* pThunkInfo, size_t);

struct ThunkInfo
{
	// Handle to the DLL module being instrumented.
	HMODULE hModule;

	// Address of the procedure as returned by GetProcAddress().
	// This address contains a JMP ds:[...] instruction.
	FARPROC procAddress;

	// Entry point address of the dll procedure.
	FARPROC procEntryPoint;

	// Entry point address of the stub generated by ThunkManager.
	FARPROC stubEntryPoint;

	// User-supplied token associated with the thunk.
	void* cookie;

	// Event handlers.
	BeforeCallHandler beforeCall;
	AfterCallHandler afterCall;
};

class ThunkManager
{
	HANDLE m_hCodeHeap;
	std::vector<ThunkInfo*> m_thunks;

public:
	ThunkManager();
	~ThunkManager();
	BOOL InstallThunk(HMODULE hModule, FARPROC procAddress, void* cookie,
		BeforeCallHandler beforeCall, AfterCallHandler afterCall);
};
